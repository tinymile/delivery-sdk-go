// Package delivery_sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package delivery_sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostOrderDroppedOff request with any body
	PostOrderDroppedOffWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrderDroppedOff(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrderPickedUp request with any body
	PostOrderPickedUpWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrderPickedUp(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOpenRobotLidCommand request with any body
	CreateOpenRobotLidCommandWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOpenRobotLidCommand(ctx context.Context, deliveryJobUuid openapi_types.UUID, body CreateOpenRobotLidCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrder request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestQuote request with any body
	RequestQuoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestQuote(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetWebhooks request with any body
	SetWebhooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetWebhooks(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostOrderDroppedOffWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderDroppedOffRequestWithBody(c.Server, deliveryJobUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrderDroppedOff(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderDroppedOffRequest(c.Server, deliveryJobUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrderPickedUpWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderPickedUpRequestWithBody(c.Server, deliveryJobUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrderPickedUp(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderPickedUpRequest(c.Server, deliveryJobUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOpenRobotLidCommandWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOpenRobotLidCommandRequestWithBody(c.Server, deliveryJobUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOpenRobotLidCommand(ctx context.Context, deliveryJobUuid openapi_types.UUID, body CreateOpenRobotLidCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOpenRobotLidCommandRequest(c.Server, deliveryJobUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestQuoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestQuoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestQuote(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestQuoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetWebhooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetWebhooksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetWebhooks(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetWebhooksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostOrderDroppedOffRequest calls the generic PostOrderDroppedOff builder with application/json body
func NewPostOrderDroppedOffRequest(server string, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrderDroppedOffRequestWithBody(server, deliveryJobUuid, "application/json", bodyReader)
}

// NewPostOrderDroppedOffRequestWithBody generates requests for PostOrderDroppedOff with any type of body
func NewPostOrderDroppedOffRequestWithBody(server string, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "delivery_job_uuid", runtime.ParamLocationPath, deliveryJobUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/delivery-jobs/%s/events/order-dropped-off", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrderPickedUpRequest calls the generic PostOrderPickedUp builder with application/json body
func NewPostOrderPickedUpRequest(server string, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrderPickedUpRequestWithBody(server, deliveryJobUuid, "application/json", bodyReader)
}

// NewPostOrderPickedUpRequestWithBody generates requests for PostOrderPickedUp with any type of body
func NewPostOrderPickedUpRequestWithBody(server string, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "delivery_job_uuid", runtime.ParamLocationPath, deliveryJobUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/delivery-jobs/%s/events/order-picked-up", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOpenRobotLidCommandRequest calls the generic CreateOpenRobotLidCommand builder with application/json body
func NewCreateOpenRobotLidCommandRequest(server string, deliveryJobUuid openapi_types.UUID, body CreateOpenRobotLidCommandJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOpenRobotLidCommandRequestWithBody(server, deliveryJobUuid, "application/json", bodyReader)
}

// NewCreateOpenRobotLidCommandRequestWithBody generates requests for CreateOpenRobotLidCommand with any type of body
func NewCreateOpenRobotLidCommandRequestWithBody(server string, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "delivery_job_uuid", runtime.ParamLocationPath, deliveryJobUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/delivery-jobs/%s/robot-commands/open-lid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestQuoteRequest calls the generic RequestQuote builder with application/json body
func NewRequestQuoteRequest(server string, body RequestQuoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestQuoteRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestQuoteRequestWithBody generates requests for RequestQuote with any type of body
func NewRequestQuoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/quotes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetWebhooksRequest calls the generic SetWebhooks builder with application/json body
func NewSetWebhooksRequest(server string, body SetWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetWebhooksRequestWithBody(server, "application/json", bodyReader)
}

// NewSetWebhooksRequestWithBody generates requests for SetWebhooks with any type of body
func NewSetWebhooksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostOrderDroppedOff request with any body
	PostOrderDroppedOffWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error)

	PostOrderDroppedOffWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error)

	// PostOrderPickedUp request with any body
	PostOrderPickedUpWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error)

	PostOrderPickedUpWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error)

	// CreateOpenRobotLidCommand request with any body
	CreateOpenRobotLidCommandWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOpenRobotLidCommandResponse, error)

	CreateOpenRobotLidCommandWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body CreateOpenRobotLidCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOpenRobotLidCommandResponse, error)

	// CreateOrder request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// RequestQuote request with any body
	RequestQuoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error)

	RequestQuoteWithResponse(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error)

	// SetWebhooks request with any body
	SetWebhooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error)

	SetWebhooksWithResponse(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error)
}

type PostOrderDroppedOffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryJob
	JSON400      *InvalidClientActionError
}

// Status returns HTTPResponse.Status
func (r PostOrderDroppedOffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrderDroppedOffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrderPickedUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryJob
	JSON400      *InvalidClientActionError
}

// Status returns HTTPResponse.Status
func (r PostOrderPickedUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrderPickedUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOpenRobotLidCommandResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidClientActionError
}

// Status returns HTTPResponse.Status
func (r CreateOpenRobotLidCommandResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOpenRobotLidCommandResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryOrder
	JSON400      *CreateOrderClientErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryOrderQuote
	JSON400      *RequestQuoteClientErrorResponse
}

// Status returns HTTPResponse.Status
func (r RequestQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Webhooks
	JSON400      *interface{}
}

// Status returns HTTPResponse.Status
func (r SetWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostOrderDroppedOffWithBodyWithResponse request with arbitrary body returning *PostOrderDroppedOffResponse
func (c *ClientWithResponses) PostOrderDroppedOffWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error) {
	rsp, err := c.PostOrderDroppedOffWithBody(ctx, deliveryJobUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderDroppedOffResponse(rsp)
}

func (c *ClientWithResponses) PostOrderDroppedOffWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error) {
	rsp, err := c.PostOrderDroppedOff(ctx, deliveryJobUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderDroppedOffResponse(rsp)
}

// PostOrderPickedUpWithBodyWithResponse request with arbitrary body returning *PostOrderPickedUpResponse
func (c *ClientWithResponses) PostOrderPickedUpWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error) {
	rsp, err := c.PostOrderPickedUpWithBody(ctx, deliveryJobUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderPickedUpResponse(rsp)
}

func (c *ClientWithResponses) PostOrderPickedUpWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error) {
	rsp, err := c.PostOrderPickedUp(ctx, deliveryJobUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderPickedUpResponse(rsp)
}

// CreateOpenRobotLidCommandWithBodyWithResponse request with arbitrary body returning *CreateOpenRobotLidCommandResponse
func (c *ClientWithResponses) CreateOpenRobotLidCommandWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOpenRobotLidCommandResponse, error) {
	rsp, err := c.CreateOpenRobotLidCommandWithBody(ctx, deliveryJobUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOpenRobotLidCommandResponse(rsp)
}

func (c *ClientWithResponses) CreateOpenRobotLidCommandWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body CreateOpenRobotLidCommandJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOpenRobotLidCommandResponse, error) {
	rsp, err := c.CreateOpenRobotLidCommand(ctx, deliveryJobUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOpenRobotLidCommandResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// RequestQuoteWithBodyWithResponse request with arbitrary body returning *RequestQuoteResponse
func (c *ClientWithResponses) RequestQuoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error) {
	rsp, err := c.RequestQuoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestQuoteResponse(rsp)
}

func (c *ClientWithResponses) RequestQuoteWithResponse(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error) {
	rsp, err := c.RequestQuote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestQuoteResponse(rsp)
}

// SetWebhooksWithBodyWithResponse request with arbitrary body returning *SetWebhooksResponse
func (c *ClientWithResponses) SetWebhooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error) {
	rsp, err := c.SetWebhooksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetWebhooksResponse(rsp)
}

func (c *ClientWithResponses) SetWebhooksWithResponse(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error) {
	rsp, err := c.SetWebhooks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetWebhooksResponse(rsp)
}

// ParsePostOrderDroppedOffResponse parses an HTTP response from a PostOrderDroppedOffWithResponse call
func ParsePostOrderDroppedOffResponse(rsp *http.Response) (*PostOrderDroppedOffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrderDroppedOffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidClientActionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOrderPickedUpResponse parses an HTTP response from a PostOrderPickedUpWithResponse call
func ParsePostOrderPickedUpResponse(rsp *http.Response) (*PostOrderPickedUpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrderPickedUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidClientActionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateOpenRobotLidCommandResponse parses an HTTP response from a CreateOpenRobotLidCommandWithResponse call
func ParseCreateOpenRobotLidCommandResponse(rsp *http.Response) (*CreateOpenRobotLidCommandResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOpenRobotLidCommandResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidClientActionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateOrderClientErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRequestQuoteResponse parses an HTTP response from a RequestQuoteWithResponse call
func ParseRequestQuoteResponse(rsp *http.Response) (*RequestQuoteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryOrderQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestQuoteClientErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetWebhooksResponse parses an HTTP response from a SetWebhooksWithResponse call
func ParseSetWebhooksResponse(rsp *http.Response) (*SetWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Webhooks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
