// Package delivery_sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20220609223533-7da811e1cf30 DO NOT EDIT.
package delivery_sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CourierState.
const (
	AnalyzingDeliveryOffer CourierState = "analyzing-delivery-offer"
	EnRouteToDropOff       CourierState = "en-route-to-drop-off"
	EnRouteToPickUp        CourierState = "en-route-to-pick-up"
	PlanningDropOffRoute   CourierState = "planning-drop-off-route"
	PlanningPickUpRoute    CourierState = "planning-pick-up-route"
	Unspecified            CourierState = "unspecified"
	WaitingForDropOff      CourierState = "waiting-for-drop-off"
	WaitingForPickUp       CourierState = "waiting-for-pick-up"
	WaitingToHandOver      CourierState = "waiting-to-hand-over"
)

// Defines values for CourierType.
const (
	Conventional CourierType = "conventional"
	Robot        CourierType = "robot"
)

// Defines values for CourierEventKind.
const (
	CourierAbortedDelivery            CourierEventKind = "courier-aborted-delivery"
	CourierAcceptedDeliveryOffer      CourierEventKind = "courier-accepted-delivery-offer"
	CourierArrivedAtDropOff           CourierEventKind = "courier-arrived-at-drop-off"
	CourierArrivedAtPickUp            CourierEventKind = "courier-arrived-at-pick-up"
	CourierDelegatedActiveDelivery    CourierEventKind = "courier-delegated-active-delivery"
	CourierDroppedOffPackage          CourierEventKind = "courier-dropped-off-package"
	CourierHandedOverPackage          CourierEventKind = "courier-handed-over-package"
	CourierLeftForDropOff             CourierEventKind = "courier-left-for-drop-off"
	CourierLeftForPickUp              CourierEventKind = "courier-left-for-pick-up"
	CourierPickedUpPackage            CourierEventKind = "courier-picked-up-package"
	CourierPositionChanged            CourierEventKind = "courier-position-changed"
	CourierPreparedToHandOver         CourierEventKind = "courier-prepared-to-hand-over"
	CourierReceivedDeliveryOffer      CourierEventKind = "courier-received-delivery-offer"
	CourierRejectedDeliveryOffer      CourierEventKind = "courier-rejected-delivery-offer"
	CourierStartedAcceptingDeliveries CourierEventKind = "courier-started-accepting-deliveries"
	CourierStoppedAcceptingDeliveries CourierEventKind = "courier-stopped-accepting-deliveries"
)

// Defines values for DeliveryJobStage.
const (
	DeliveryJobStageCourierAssignment DeliveryJobStage = "courier-assignment"
	DeliveryJobStageDeliveryCanceled  DeliveryJobStage = "delivery-canceled"
	DeliveryJobStageDeliveryCompleted DeliveryJobStage = "delivery-completed"
	DeliveryJobStageDropOff           DeliveryJobStage = "drop-off"
	DeliveryJobStagePickUp            DeliveryJobStage = "pick-up"
)

// Defines values for DeliveryJobEventKind.
const (
	DeliveryJobEventKindDeliveryCanceled                  DeliveryJobEventKind = "delivery-canceled"
	DeliveryJobEventKindDeliveryCompleted                 DeliveryJobEventKind = "delivery-completed"
	DeliveryJobEventKindDeliveryHandedOver                DeliveryJobEventKind = "delivery-handed-over"
	DeliveryJobEventKindDeliveryJobAcceptedByNextCourier  DeliveryJobEventKind = "delivery-job-accepted-by-next-courier"
	DeliveryJobEventKindDeliveryJobAssigned               DeliveryJobEventKind = "delivery-job-assigned"
	DeliveryJobEventKindDeliveryJobCreated                DeliveryJobEventKind = "delivery-job-created"
	DeliveryJobEventKindDeliveryJobDelegatedToNextCourier DeliveryJobEventKind = "delivery-job-delegated-to-next-courier"
	DeliveryJobEventKindDeliveryJobOfferedToCourier       DeliveryJobEventKind = "delivery-job-offered-to-courier"
	DeliveryJobEventKindDeliveryJobOfferedToNextCourier   DeliveryJobEventKind = "delivery-job-offered-to-next-courier"
	DeliveryJobEventKindDeliveryJobRejectedByCourier      DeliveryJobEventKind = "delivery-job-rejected-by-courier"
	DeliveryJobEventKindDeliveryJobRejectedByNextCourier  DeliveryJobEventKind = "delivery-job-rejected-by-next-courier"
	DeliveryJobEventKindDeliveryJobUnassigned             DeliveryJobEventKind = "delivery-job-unassigned"
	DeliveryJobEventKindDeliveryPickedUp                  DeliveryJobEventKind = "delivery-picked-up"
	DeliveryJobEventKindReceivedNewCourierPosition        DeliveryJobEventKind = "received-new-courier-position"
	DeliveryJobEventKindUnassignedNextCourier             DeliveryJobEventKind = "unassigned-next-courier"
)

// Defines values for DeliveryOrderStatus.
const (
	OrderAccepted DeliveryOrderStatus = "order-accepted"
	OrderCanceled DeliveryOrderStatus = "order-canceled"
	OrderReceived DeliveryOrderStatus = "order-received"
	OrderRejected DeliveryOrderStatus = "order-rejected"
)

// Defines values for DeliveryOrderRejectionReason.
const (
	DeliveryDistanceTooLarge      DeliveryOrderRejectionReason = "delivery-distance-too-large"
	NoCapacity                    DeliveryOrderRejectionReason = "no-capacity"
	OutsideDeliveryArea           DeliveryOrderRejectionReason = "outside-delivery-area"
	ScheduledDeliveryNotSupported DeliveryOrderRejectionReason = "scheduled-delivery-not-supported"
)

// Defines values for InvalidClientActionErrorReason.
const (
	DeactivatedClient InvalidClientActionErrorReason = "deactivated-client"
	InvalidArgument   InvalidClientActionErrorReason = "invalid-argument"
)

// AddressDescription defines model for AddressDescription.
type AddressDescription struct {
	AddressLine1      string  `json:"addressLine1"`
	AddressLine2      *string `json:"addressLine2,omitempty"`
	Country           string  `json:"country"`
	EstablishmentName *string `json:"establishmentName,omitempty"`
	Locality          string  `json:"locality"`
	PostalCode        string  `json:"postalCode"`
	State             string  `json:"state"`
}

// CompleteAddress defines model for CompleteAddress.
type CompleteAddress struct {
	AddressDescription AddressDescription `json:"addressDescription"`
	GeocodedAddress    GeocodedAddress    `json:"geocodedAddress"`
}

// Courier defines model for Courier.
type Courier struct {
	ActiveDeliveryUuid    openapi_types.UUID `json:"activeDeliveryUuid"`
	IsAcceptingDeliveries bool               `json:"isAcceptingDeliveries"`
	LastKnownPosition     *GeocodeLogEntry   `json:"lastKnownPosition,omitempty"`
	Name                  string             `json:"name"`
	State                 CourierState       `json:"state"`
	Type                  CourierType        `json:"type"`
	Uuid                  openapi_types.UUID `json:"uuid"`
}

// CourierState defines model for Courier.State.
type CourierState string

// CourierType defines model for Courier.Type.
type CourierType string

// CourierEvent defines model for CourierEvent.
type CourierEvent struct {
	Courier       Courier            `json:"courier"`
	CourierBefore *Courier           `json:"courierBefore,omitempty"`
	Kind          CourierEventKind   `json:"kind"`
	ProducedAt    time.Time          `json:"producedAt"`
	Uuid          openapi_types.UUID `json:"uuid"`
}

// CourierEventKind defines model for CourierEvent.Kind.
type CourierEventKind string

// CreateOrderClientErrorResponse defines model for CreateOrderClientErrorResponse.
type CreateOrderClientErrorResponse struct {
	union json.RawMessage
}

// DeliveryCharges defines model for DeliveryCharges.
type DeliveryCharges struct {
	TotalInCents int32 `json:"totalInCents"`
}

// DeliveryJob defines model for DeliveryJob.
type DeliveryJob struct {
	CompletedAt        *time.Time          `json:"completedAt,omitempty"`
	CurrentCourierUUID *openapi_types.UUID `json:"currentCourierUUID,omitempty"`
	DeliveryCharges    DeliveryCharges     `json:"deliveryCharges"`
	DeliveryOrderUuid  openapi_types.UUID  `json:"deliveryOrderUuid"`
	DropOffService     DeliveryService     `json:"dropOffService"`
	NextCourierUUID    *openapi_types.UUID `json:"nextCourierUUID,omitempty"`
	PickUpService      DeliveryService     `json:"pickUpService"`
	Stage              DeliveryJobStage    `json:"stage"`
	Uuid               openapi_types.UUID  `json:"uuid"`
}

// DeliveryJobStage defines model for DeliveryJob.Stage.
type DeliveryJobStage string

// DeliveryJobEvent defines model for DeliveryJobEvent.
type DeliveryJobEvent struct {
	DeliveryJob       DeliveryJob          `json:"deliveryJob"`
	DeliveryJobBefore *DeliveryJob         `json:"deliveryJobBefore,omitempty"`
	Kind              DeliveryJobEventKind `json:"kind"`
	ProducedAt        time.Time            `json:"producedAt"`
	Uuid              openapi_types.UUID   `json:"uuid"`
}

// DeliveryJobEventKind defines model for DeliveryJobEvent.Kind.
type DeliveryJobEventKind string

// DeliveryOrder defines model for DeliveryOrder.
type DeliveryOrder struct {
	DeliveryCharges DeliveryCharges     `json:"deliveryCharges"`
	DropOff         DeliveryService     `json:"dropOff"`
	ExternalID      string              `json:"externalID"`
	IsMock          bool                `json:"isMock"`
	PickUp          DeliveryService     `json:"pickUp"`
	ReceivedAt      time.Time           `json:"receivedAt"`
	Receiver        DeliveryOrderParty  `json:"receiver"`
	Shipper         DeliveryOrderParty  `json:"shipper"`
	Status          DeliveryOrderStatus `json:"status"`
	Uuid            openapi_types.UUID  `json:"uuid"`
}

// DeliveryOrderStatus defines model for DeliveryOrder.Status.
type DeliveryOrderStatus string

// DeliveryOrderCreationRequest defines model for DeliveryOrderCreationRequest.
type DeliveryOrderCreationRequest struct {
	DropOffAddress     CompleteAddress    `json:"dropOffAddress"`
	DropOffDeadlineAt  *time.Time         `json:"dropOffDeadlineAt,omitempty"`
	DropOffNotes       *string            `json:"dropOffNotes,omitempty"`
	DropOffNotifyParty *NotifyParty       `json:"dropOffNotifyParty,omitempty"`
	ExternalID         string             `json:"externalID"`
	IsMock             *bool              `json:"isMock,omitempty"`
	PickUpAddress      CompleteAddress    `json:"pickUpAddress"`
	PickUpDeadlineAt   *time.Time         `json:"pickUpDeadlineAt,omitempty"`
	PickUpNotes        *string            `json:"pickUpNotes,omitempty"`
	PickUpNotifyParty  *NotifyParty       `json:"pickUpNotifyParty,omitempty"`
	Receiver           DeliveryOrderParty `json:"receiver"`
	Shipper            DeliveryOrderParty `json:"shipper"`
}

// DeliveryOrderParty defines model for DeliveryOrderParty.
type DeliveryOrderParty struct {
	Email       *string `json:"email,omitempty"`
	IsBusiness  bool    `json:"isBusiness"`
	Name        string  `json:"name"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// DeliveryOrderQuote defines model for DeliveryOrderQuote.
type DeliveryOrderQuote struct {
	DeliveryCharges   DeliveryCharges    `json:"deliveryCharges"`
	DropOffAddress    CompleteAddress    `json:"dropOffAddress"`
	DropOffAfter      time.Time          `json:"dropOffAfter"`
	DropOffDeadlineAt time.Time          `json:"dropOffDeadlineAt"`
	GoodUntil         time.Time          `json:"goodUntil"`
	IsMock            bool               `json:"isMock"`
	PickUpAddress     CompleteAddress    `json:"pickUpAddress"`
	PickUpAfter       time.Time          `json:"pickUpAfter"`
	PickUpDeadlineAt  time.Time          `json:"pickUpDeadlineAt"`
	ReceivedAt        time.Time          `json:"receivedAt"`
	Uuid              openapi_types.UUID `json:"uuid"`
}

// DeliveryOrderQuoteRequest defines model for DeliveryOrderQuoteRequest.
type DeliveryOrderQuoteRequest struct {
	DropOffAddress GeocodedAddress `json:"dropOffAddress"`
	IsMock         *bool           `json:"isMock,omitempty"`
	PickUpAddress  GeocodedAddress `json:"pickUpAddress"`
}

// DeliveryOrderRejection defines model for DeliveryOrderRejection.
type DeliveryOrderRejection struct {
	Message string                       `json:"message"`
	Reason  DeliveryOrderRejectionReason `json:"reason"`
}

// DeliveryOrderRejectionReason defines model for DeliveryOrderRejection.Reason.
type DeliveryOrderRejectionReason string

// DeliveryService defines model for DeliveryService.
type DeliveryService struct {
	Address                CompleteAddress `json:"address"`
	DeadlineAt             time.Time       `json:"deadlineAt"`
	EstimatedAt            time.Time       `json:"estimatedAt"`
	IsSelfServiceAvailable bool            `json:"isSelfServiceAvailable"`
	Notes                  string          `json:"notes"`
	NotifyParty            NotifyParty     `json:"notifyParty"`
	ServiceAfter           time.Time       `json:"serviceAfter"`
}

// GeocodeLogEntry defines model for GeocodeLogEntry.
type GeocodeLogEntry struct {
	GeocodedAddress GeocodedAddress `json:"geocodedAddress"`
	RecordedAt      time.Time       `json:"recordedAt"`
}

// GeocodedAddress defines model for GeocodedAddress.
type GeocodedAddress struct {
	GooglePlaceID *string `json:"googlePlaceID,omitempty"`
	Lat           float64 `json:"lat"`
	Lng           float64 `json:"lng"`
}

// InvalidClientActionError defines model for InvalidClientActionError.
type InvalidClientActionError struct {
	Message string                         `json:"message"`
	Reason  InvalidClientActionErrorReason `json:"reason"`
}

// InvalidClientActionErrorReason defines model for InvalidClientActionError.Reason.
type InvalidClientActionErrorReason string

// NotifyParty defines model for NotifyParty.
type NotifyParty struct {
	Email       *string `json:"email,omitempty"`
	Name        *string `json:"name,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// RequestQuoteClientErrorResponse defines model for RequestQuoteClientErrorResponse.
type RequestQuoteClientErrorResponse struct {
	union json.RawMessage
}

// Webhook defines model for Webhook.
type Webhook struct {
	ApiKey string `json:"api_key"`
	Url    string `json:"url"`
}

// Webhooks defines model for Webhooks.
type Webhooks struct {
	CourierEvents     Webhook `json:"courierEvents"`
	DeliveryJobEvents Webhook `json:"deliveryJobEvents"`
}

// PostOrderDroppedOffJSONBody defines parameters for PostOrderDroppedOff.
type PostOrderDroppedOffJSONBody interface{}

// PostOrderPickedUpJSONBody defines parameters for PostOrderPickedUp.
type PostOrderPickedUpJSONBody interface{}

// CreateOrderJSONBody defines parameters for CreateOrder.
type CreateOrderJSONBody = DeliveryOrderCreationRequest

// RequestQuoteJSONBody defines parameters for RequestQuote.
type RequestQuoteJSONBody = DeliveryOrderQuoteRequest

// SetWebhooksJSONBody defines parameters for SetWebhooks.
type SetWebhooksJSONBody = Webhooks

// PostOrderDroppedOffJSONRequestBody defines body for PostOrderDroppedOff for application/json ContentType.
type PostOrderDroppedOffJSONRequestBody PostOrderDroppedOffJSONBody

// PostOrderPickedUpJSONRequestBody defines body for PostOrderPickedUp for application/json ContentType.
type PostOrderPickedUpJSONRequestBody PostOrderPickedUpJSONBody

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = CreateOrderJSONBody

// RequestQuoteJSONRequestBody defines body for RequestQuote for application/json ContentType.
type RequestQuoteJSONRequestBody = RequestQuoteJSONBody

// SetWebhooksJSONRequestBody defines body for SetWebhooks for application/json ContentType.
type SetWebhooksJSONRequestBody = SetWebhooksJSONBody

func (t CreateOrderClientErrorResponse) AsDeliveryOrderRejection() (DeliveryOrderRejection, error) {
	var body DeliveryOrderRejection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *CreateOrderClientErrorResponse) FromDeliveryOrderRejection(v DeliveryOrderRejection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t CreateOrderClientErrorResponse) AsInvalidClientActionError() (InvalidClientActionError, error) {
	var body InvalidClientActionError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *CreateOrderClientErrorResponse) FromInvalidClientActionError(v InvalidClientActionError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t CreateOrderClientErrorResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateOrderClientErrorResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

func (t RequestQuoteClientErrorResponse) AsDeliveryOrderRejection() (DeliveryOrderRejection, error) {
	var body DeliveryOrderRejection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *RequestQuoteClientErrorResponse) FromDeliveryOrderRejection(v DeliveryOrderRejection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t RequestQuoteClientErrorResponse) AsInvalidClientActionError() (InvalidClientActionError, error) {
	var body InvalidClientActionError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

func (t *RequestQuoteClientErrorResponse) FromInvalidClientActionError(v InvalidClientActionError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

func (t RequestQuoteClientErrorResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RequestQuoteClientErrorResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostOrderDroppedOff request with any body
	PostOrderDroppedOffWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrderDroppedOff(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrderPickedUp request with any body
	PostOrderPickedUpWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrderPickedUp(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrder request with any body
	CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestQuote request with any body
	RequestQuoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestQuote(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetWebhooks request with any body
	SetWebhooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetWebhooks(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostOrderDroppedOffWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderDroppedOffRequestWithBody(c.Server, deliveryJobUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrderDroppedOff(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderDroppedOffRequest(c.Server, deliveryJobUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrderPickedUpWithBody(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderPickedUpRequestWithBody(c.Server, deliveryJobUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrderPickedUp(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrderPickedUpRequest(c.Server, deliveryJobUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrder(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestQuoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestQuoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestQuote(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestQuoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetWebhooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetWebhooksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetWebhooks(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetWebhooksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostOrderDroppedOffRequest calls the generic PostOrderDroppedOff builder with application/json body
func NewPostOrderDroppedOffRequest(server string, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrderDroppedOffRequestWithBody(server, deliveryJobUuid, "application/json", bodyReader)
}

// NewPostOrderDroppedOffRequestWithBody generates requests for PostOrderDroppedOff with any type of body
func NewPostOrderDroppedOffRequestWithBody(server string, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "delivery_job_uuid", runtime.ParamLocationPath, deliveryJobUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/delivery-jobs/%s/events/order-dropped-off", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrderPickedUpRequest calls the generic PostOrderPickedUp builder with application/json body
func NewPostOrderPickedUpRequest(server string, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrderPickedUpRequestWithBody(server, deliveryJobUuid, "application/json", bodyReader)
}

// NewPostOrderPickedUpRequestWithBody generates requests for PostOrderPickedUp with any type of body
func NewPostOrderPickedUpRequestWithBody(server string, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "delivery_job_uuid", runtime.ParamLocationPath, deliveryJobUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/delivery-jobs/%s/events/order-picked-up", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrderRequest calls the generic CreateOrder builder with application/json body
func NewCreateOrderRequest(server string, body CreateOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrderRequestWithBody generates requests for CreateOrder with any type of body
func NewCreateOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestQuoteRequest calls the generic RequestQuote builder with application/json body
func NewRequestQuoteRequest(server string, body RequestQuoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestQuoteRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestQuoteRequestWithBody generates requests for RequestQuote with any type of body
func NewRequestQuoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/quotes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetWebhooksRequest calls the generic SetWebhooks builder with application/json body
func NewSetWebhooksRequest(server string, body SetWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetWebhooksRequestWithBody(server, "application/json", bodyReader)
}

// NewSetWebhooksRequestWithBody generates requests for SetWebhooks with any type of body
func NewSetWebhooksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostOrderDroppedOff request with any body
	PostOrderDroppedOffWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error)

	PostOrderDroppedOffWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error)

	// PostOrderPickedUp request with any body
	PostOrderPickedUpWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error)

	PostOrderPickedUpWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error)

	// CreateOrder request with any body
	CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error)

	// RequestQuote request with any body
	RequestQuoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error)

	RequestQuoteWithResponse(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error)

	// SetWebhooks request with any body
	SetWebhooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error)

	SetWebhooksWithResponse(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error)
}

type PostOrderDroppedOffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryJob
	JSON400      *InvalidClientActionError
}

// Status returns HTTPResponse.Status
func (r PostOrderDroppedOffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrderDroppedOffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrderPickedUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryJob
	JSON400      *InvalidClientActionError
}

// Status returns HTTPResponse.Status
func (r PostOrderPickedUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrderPickedUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryOrder
	JSON400      *CreateOrderClientErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeliveryOrderQuote
	JSON400      *RequestQuoteClientErrorResponse
}

// Status returns HTTPResponse.Status
func (r RequestQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Webhooks
	JSON400      *interface{}
}

// Status returns HTTPResponse.Status
func (r SetWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostOrderDroppedOffWithBodyWithResponse request with arbitrary body returning *PostOrderDroppedOffResponse
func (c *ClientWithResponses) PostOrderDroppedOffWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error) {
	rsp, err := c.PostOrderDroppedOffWithBody(ctx, deliveryJobUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderDroppedOffResponse(rsp)
}

func (c *ClientWithResponses) PostOrderDroppedOffWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderDroppedOffJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderDroppedOffResponse, error) {
	rsp, err := c.PostOrderDroppedOff(ctx, deliveryJobUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderDroppedOffResponse(rsp)
}

// PostOrderPickedUpWithBodyWithResponse request with arbitrary body returning *PostOrderPickedUpResponse
func (c *ClientWithResponses) PostOrderPickedUpWithBodyWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error) {
	rsp, err := c.PostOrderPickedUpWithBody(ctx, deliveryJobUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderPickedUpResponse(rsp)
}

func (c *ClientWithResponses) PostOrderPickedUpWithResponse(ctx context.Context, deliveryJobUuid openapi_types.UUID, body PostOrderPickedUpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrderPickedUpResponse, error) {
	rsp, err := c.PostOrderPickedUp(ctx, deliveryJobUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrderPickedUpResponse(rsp)
}

// CreateOrderWithBodyWithResponse request with arbitrary body returning *CreateOrderResponse
func (c *ClientWithResponses) CreateOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateOrderWithResponse(ctx context.Context, body CreateOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrderResponse, error) {
	rsp, err := c.CreateOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrderResponse(rsp)
}

// RequestQuoteWithBodyWithResponse request with arbitrary body returning *RequestQuoteResponse
func (c *ClientWithResponses) RequestQuoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error) {
	rsp, err := c.RequestQuoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestQuoteResponse(rsp)
}

func (c *ClientWithResponses) RequestQuoteWithResponse(ctx context.Context, body RequestQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestQuoteResponse, error) {
	rsp, err := c.RequestQuote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestQuoteResponse(rsp)
}

// SetWebhooksWithBodyWithResponse request with arbitrary body returning *SetWebhooksResponse
func (c *ClientWithResponses) SetWebhooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error) {
	rsp, err := c.SetWebhooksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetWebhooksResponse(rsp)
}

func (c *ClientWithResponses) SetWebhooksWithResponse(ctx context.Context, body SetWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*SetWebhooksResponse, error) {
	rsp, err := c.SetWebhooks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetWebhooksResponse(rsp)
}

// ParsePostOrderDroppedOffResponse parses an HTTP response from a PostOrderDroppedOffWithResponse call
func ParsePostOrderDroppedOffResponse(rsp *http.Response) (*PostOrderDroppedOffResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrderDroppedOffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidClientActionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostOrderPickedUpResponse parses an HTTP response from a PostOrderPickedUpWithResponse call
func ParsePostOrderPickedUpResponse(rsp *http.Response) (*PostOrderPickedUpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrderPickedUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidClientActionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateOrderResponse parses an HTTP response from a CreateOrderWithResponse call
func ParseCreateOrderResponse(rsp *http.Response) (*CreateOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreateOrderClientErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRequestQuoteResponse parses an HTTP response from a RequestQuoteWithResponse call
func ParseRequestQuoteResponse(rsp *http.Response) (*RequestQuoteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeliveryOrderQuote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RequestQuoteClientErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetWebhooksResponse parses an HTTP response from a SetWebhooksWithResponse call
func ParseSetWebhooksResponse(rsp *http.Response) (*SetWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Webhooks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
